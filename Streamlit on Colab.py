{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14669,"status":"ok","timestamp":1695709238014,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"lKLf31LU3jLK"},"outputs":[],"source":["!pip install -q streamlit\n","\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8119,"status":"ok","timestamp":1695709246122,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"yz7ah-U35VSP"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: pyngrok in /usr/local/lib/python3.10/dist-packages (7.0.0)\n","Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from pyngrok) (6.0.1)\n"]}],"source":["!pip install pyngrok\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"background_save":true},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1695709247810,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"Zkq-Gh8_1xp3"},"outputs":[],"source":["from pyngrok import ngrok"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":447,"status":"ok","timestamp":1695709251684,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"GjYnn_F43fs8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Authtoken saved to configuration file: /root/.ngrok2/ngrok.yml\n"]}],"source":["!ngrok authtoken 2VFbhDnJuMQciAPeNTN0xgXUFBe_71YpQ3CS2m1oTgaWsD1yd"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":687,"status":"ok","timestamp":1695709571079,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"KqO3nfen5Om2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting app.py\n"]}],"source":["%%writefile app.py\n","import streamlit as st\n","import pandas as pd\n","from db_fxns import *\n","import streamlit.components.v1 as stc\n","\n","\n","# Data Viz Pkgs\n","import plotly.express as px\n","\n","\n","HTML_BANNER = \"\"\"\n","    \u003cdiv style=\"background-color:#464e5f;padding:10px;border-radius:10px\"\u003e\n","    \u003ch1 style=\"color:white;text-align:center;\"\u003eToDo App (CRUD)\u003c/h1\u003e\n","    \u003cp style=\"color:white;text-align:center;\"\u003eBuilt with Streamlit\u003c/p\u003e\n","    \u003c/div\u003e\n","    \"\"\"\n","\n","\n","def main():\n","\tstc.html(HTML_BANNER)\n","\n","\n","\tmenu = [\"Create\",\"Read\",\"Update\",\"Delete\",\"About\"]\n","\tchoice = st.sidebar.selectbox(\"Menu\",menu)\n","\tcreate_table()\n","\n","\tif choice == \"Create\":\n","\t\tst.subheader(\"Add Item\")\n","\t\tcol1,col2 = st.columns(2)\n","\n","\t\twith col1:\n","\t\t\ttask = st.text_area(\"Task To Do\")\n","\n","\t\twith col2:\n","\t\t\ttask_status = st.selectbox(\"Status\",[\"ToDo\",\"Doing\",\"Done\"])\n","\t\t\ttask_due_date = st.date_input(\"Due Date\")\n","\n","\t\tif st.button(\"Add Task\"):\n","\t\t\tadd_data(task,task_status,task_due_date)\n","\t\t\tst.success(\"Added ::{} ::To Task\".format(task))\n","\n","\n","\telif choice == \"Read\":\n","\t\t# st.subheader(\"View Items\")\n","\t\twith st.expander(\"View All\"):\n","\t\t\tresult = view_all_data()\n","\t\t\t# st.write(result)\n","\t\t\tclean_df = pd.DataFrame(result,columns=[\"Task\",\"Status\",\"Date\"])\n","\t\t\tst.dataframe(clean_df)\n","\n","\t\twith st.expander(\"Task Status\"):\n","\t\t\ttask_df = clean_df['Status'].value_counts().to_frame()\n","\t\t\t# st.dataframe(task_df)\n","\t\t\ttask_df = task_df.reset_index()\n","\t\t\tst.dataframe(task_df)\n","\n","\t\t\tp1 = px.pie(task_df,names='index',values='Status')\n","\t\t\tst.plotly_chart(p1,use_container_width=True)\n","\n","\n","\telif choice == \"Update\":\n","\t\tst.subheader(\"Edit Items\")\n","\t\twith st.expander(\"Current Data\"):\n","\t\t\tresult = view_all_data()\n","\t\t\t# st.write(result)\n","\t\t\tclean_df = pd.DataFrame(result,columns=[\"Task\",\"Status\",\"Date\"])\n","\t\t\tst.dataframe(clean_df)\n","\n","\t\tlist_of_tasks = [i[0] for i in view_all_task_names()]\n","\t\tselected_task = st.selectbox(\"Task\",list_of_tasks)\n","\t\ttask_result = get_task(selected_task)\n","\t\t# st.write(task_result)\n","\n","\t\tif task_result:\n","\t\t\ttask = task_result[0][0]\n","\t\t\ttask_status = task_result[0][1]\n","\t\t\ttask_due_date = task_result[0][2]\n","\n","\t\t\tcol1,col2 = st.columns(2)\n","\n","\t\t\twith col1:\n","\t\t\t\tnew_task = st.text_area(\"Task To Do\",task)\n","\n","\t\t\twith col2:\n","\t\t\t\tnew_task_status = st.selectbox(task_status,[\"ToDo\",\"Doing\",\"Done\"])\n","\t\t\t\tnew_task_due_date = st.date_input(task_due_date)\n","\n","\t\t\tif st.button(\"Update Task\"):\n","\t\t\t\tedit_task_data(new_task,new_task_status,new_task_due_date,task,task_status,task_due_date)\n","\t\t\t\tst.success(\"Updated ::{} ::To {}\".format(task,new_task))\n","\n","\t\t\twith st.expander(\"View Updated Data\"):\n","\t\t\t\tresult = view_all_data()\n","\t\t\t\t# st.write(result)\n","\t\t\t\tclean_df = pd.DataFrame(result,columns=[\"Task\",\"Status\",\"Date\"])\n","\t\t\t\tst.dataframe(clean_df)\n","\n","\n","\telif choice == \"Delete\":\n","\t\tst.subheader(\"Delete\")\n","\t\twith st.expander(\"View Data\"):\n","\t\t\tresult = view_all_data()\n","\t\t\t# st.write(result)\n","\t\t\tclean_df = pd.DataFrame(result,columns=[\"Task\",\"Status\",\"Date\"])\n","\t\t\tst.dataframe(clean_df)\n","\n","\t\tunique_list = [i[0] for i in view_all_task_names()]\n","\t\tdelete_by_task_name =  st.selectbox(\"Select Task\",unique_list)\n","\t\tif st.button(\"Delete\"):\n","\t\t\tdelete_data(delete_by_task_name)\n","\t\t\tst.warning(\"Deleted: '{}'\".format(delete_by_task_name))\n","\n","\t\twith st.expander(\"Updated Data\"):\n","\t\t\tresult = view_all_data()\n","\t\t\t# st.write(result)\n","\t\t\tclean_df = pd.DataFrame(result,columns=[\"Task\",\"Status\",\"Date\"])\n","\t\t\tst.dataframe(clean_df)\n","\n","\telse:\n","\t\tst.subheader(\"About ToDo List App\")\n","\t\tst.info(\"Built with Streamlit\")\n","\t\tst.info(\"Jesus Saves @JCharisTech\")\n","\t\tst.text(\"Jesse E.Agbe(JCharis)\")\n","\n","\n","if __name__ == '__main__':\n","\tmain()\n","\n","\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":331,"status":"ok","timestamp":1695709585028,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"YecwkItI5mW0"},"outputs":[{"name":"stdout","output_type":"stream","text":["nohup: appending output to 'nohup.out'\n"]}],"source":["!nohup streamlit run app.py \u0026"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6785,"status":"ok","timestamp":1695655529704,"user":{"displayName":"Nuno","userId":"04087299612543945964"},"user_tz":-120},"id":"kybyulGc2GAh"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Collecting usage statistics. To deactivate, set browser.gatherUsageStats to False.\n","\u001b[0m\n","\u001b[0m\n","\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n","\u001b[0m\n","\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.12:8502\u001b[0m\n","\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://34.125.15.195:8502\u001b[0m\n","\u001b[0m\n","\u001b[K\u001b[?25hnpx: installed 22 in 3.801s\n","your url is: https://light-bottles-feel.loca.lt\n","/root/.npm/_npx/790/lib/node_modules/localtunnel/bin/lt.js:81\n","    throw err;\n","    ^\n","\n","Error: connection refused: localtunnel.me:33841 (check your firewall settings)\n","    at Socket.\u003canonymous\u003e (/root/.npm/_npx/790/lib/node_modules/\u001b[4mlocaltunnel\u001b[24m/lib/TunnelCluster.js:52:11)\n","\u001b[90m    at Socket.emit (events.js:315:20)\u001b[39m\n","\u001b[90m    at emitErrorNT (internal/streams/destroy.js:106:8)\u001b[39m\n","\u001b[90m    at emitErrorCloseNT (internal/streams/destroy.js:74:3)\u001b[39m\n","\u001b[90m    at processTicksAndRejections (internal/process/task_queues.js:80:21)\u001b[39m\n"]}],"source":["!streamlit run /content/app.py \u0026 npx localtunnel --port 8501"]},{"cell_type":"markdown","metadata":{"id":"Jzlao8no6Ihd"},"source":["scrivi il valore dell esternal url quando richiesto. in questo caso 34.125.84.73 senza la porta"]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1695319568601}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}